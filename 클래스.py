클래스

def 중요변수(변수, 변수, 변수): - 함수 설정
  print("{0} {1} {2}".format(변수, 변수, 변수)
        
중요 변수(변수 or "내용", 변수 or "내용", 변수 or "내용") - 함수 출력 
        
class 이름: - 클래스 만들기
     def __init__(self, 변수1, 변수2, 변수3):
        self.변수1 = 변수1
        self.변수2 = 변수2
        self.변수3 = 변수3
        print("{0} {1} {2}".format(self.변수2, self.변수1, self.변수3)
변수 = 이름(문자열, 문자열, 문자열) - 클래스에 맞쳐서 출력
print("{0} {1}".format(변수.변수1, 변수.변수2) - 출력 내용 맞춤
---------------------------------------------------------------------------------------------------------------------------------------
__init__ - 생산자(자동 호출)
              
-self를 제외하고 동일한 계수를 넘겨야함
---------------------------------------------------------------------------------------------------------------------------------------
멤버변수 - 클래스 내에서 정의된 변수
---------------------------------------------------------------------------------------------------------------------------------------
메소드 - self를 안쓰면 자기 자신이 아닌 전달 받은 값을 쓴다는 의미
      
class 이름: - 클래스 만들기
     def __init__(self, 변수1, 변수2, 변수3):
        self.변수1 = 변수1
        self.변수2 = 변수2
        self.변수3 = 변수3
        print("{0} {1} {2}".format(self.변수2, self.변수1, self.변수3)
     def 이름(변수)
              pass
              
변수.이름(내용) - def 함수에서 정의한 내용 출력
---------------------------------------------------------------------------------------------------------------------------------------
상속
              
class 이름(상속할 클래스 이름): - 클래스 만들기
     def __init__(self, 변수1, 변수2, 변수3):
        상속할 클래스 이름.__init__(self, 받을 변수, 받을 변수)
        self.변수1 = 변수1
        self.변수2 = 변수2
        self.변수3 = 변수3
---------------------------------------------------------------------------------------------------------------------------------------
다중 상속  (필요없는 변수는 0으로 처리)
              
class 이름(상속할 클래스 이름, 상속할 클래스 이름): - 클래스 만들기
     def __init__(self, 변수1, 받을 변수....): - 받는 변수가 다 적혀져 있어야 함
        상속할 클래스 이름.__init__(self, 받을 변수, 받을 변수))
        상속할 클래스 이름.__init__(self, 받을 변수, 받을 변수)
              상속할 클래스 이름.__init__(self, 받을 변수, 받을 변수)
     def 이름(변수)
              pass                    
---------------------------------------------------------------------------------------------------------------------------------------
메소드 오버라이딩     

-서로 다른 클래스에서 정의한 이름이 같은 변수가 내용이 다르면 서로 다른 내용이 적용
---------------------------------------------------------------------------------------------------------------------------------------
pass
      
함수를 완성된 것처럼 보이게함
---------------------------------------------------------------------------------------------------------------------------------------
super   (다중 상속증 마지막꺼만 호출,self 빼고 씀)
      
class 이름(상속할 클래스 이름, 상속할 클래스 이름): - 클래스 만들기
     def __init__(self, 변수1, 받을 변수....): - 받는 변수가 다 적혀져 있어야 함
       super().__init__(받을 변수, 받을 변수))
---------------------------------------------------------------------------------------------------------------------------------------         
